@use '../../variables.scss';


@mixin border-radius($args...) 
{
    @if length($args) == 1 
    {
      $value: nth($args, 1);
      border-radius: __null($value, space);
    }
    @else if length($args) == 2 
    {
      $corner: nth($args, 1);
      $value: nth($args, 2);

      @if index(variables.$TiposRadios, $corner) 
      {
        @if $corner == "rounded-top" 
        {
          border-top-left-radius: $value;
          border-top-right-radius: $value;
        }
        @else if $corner == "rounded-right"
        {
          border-top-right-radius: $value;
          border-bottom-right-radius: $value;
        }
        @else if $corner == "rounded-bottom"
        {
          border-bottom-left-radius: $value;
          border-bottom-right-radius: $value;
        }
        @else if $corner == "rounded-left"
        {
          border-top-left-radius: $value;
          border-bottom-left-radius: $value;
        }
        @else if $corner == "rounded"
        {
          border-radius: $value;
        }
        @else if $corner == "rounded-diagonal"
        {
          border-top-left-radius: $value;
          border-bottom-right-radius: $value;
        }
        @else if $corner == "rounded-diagonal-reversive"
        {
          border-top-right-radius: $value;
          border-bottom-left-radius: $value;
        }
      }
    }
}


@for $iterador from 1 through 7
{
    $var: nth(variables.$TiposRadios, $iterador);

    @for $iterador2 from 1 to 7
    {
      $var2: nth(variables.$tiposEsquina, $iterador2);
      $var3: $var2+px;
      .#{$var}-#{$var2}
      {
          @include border-radius(#{$var}, $var3);
      }
    }

}

